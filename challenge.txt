Challenge 01
Everyday drivers need to pick up/deliver a specific number of orders. Every order has a given weight, a destination, observations, and is assigned to a particular vehicle plate number. All vehicles have a max weight capacity, and every order naturally takes some of that capacity.
At the beginning of the day, a fleet manager needs to assign a certain number of orders to a vehicle.
For that to happen our system needs to store a list of orders that a vehicle was assigned on a specific day. When receiving the list of orders for a vehicle, the application should sort the orders so a driver knows which order to do next.
The order delivery sequence cant be random because we'd like to save some costs, which we can safely assume to be proportional to distance travelled.
So each driver starts their journey on Fintech House in Lisbon (38.71814, -9.14552), and there are 4 orders [A(40.97134, -5.66337), B(39.47590, -0.37696), C(41.15936, -8.62907), D(40.42382, -3.70254)]

To get the distance between coordinates you can use HERE API: https://developer.here.com/develop/rest-apis, alternative you can mock the response.
To help drivers do their job, at the beginning of the day they need to know all orders assigned to their vehicle.

Also, at all times they need to know which is the next delivery.
Because logistics is quite chaotic, the backoffice needs to update order observations and learn when a driver completes a delivery.

Finally and to help managers keep track of their day, we need to always show them which orders are still to be delivered.## BonusEvery time a delivery is finished the application should get an event informing the manager.

This service is listening to that event and updating the available weight capacity of the vehicle that was performing the order.
At any time, we should be able to get the available capacity of a specific vehicle.
Every time an order update happens, the drivers is notified

## Technical EvaluationUI (use Material Design)

You are expected to build a simple experience that allows the manager to:
* create orders for a given day
* search and list unassigned orders by day or destination name, be able to sort results
* be able to assign an order to an existing vehicle
* list vehicle/order assignment
* be able to define favourite vehicles so they appear first when assigning ordersps:
all user actions to persist data should make a popup appear, all input forms should be modalsps-2:
you are expected to build the frontend API dependency and mock the actual requests

### Devops Containerization
You are expected to deliver you solution containerized (e.g. docker compose), or to be compiled (in case of Android)

### Continuous Integration (Bonus)
You are expected to build automation to run tests